name: Python package

on: [push]

jobs:
  test-wheel:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        # TODO: Add 'pypy3.10' and 'pypy3.9" when the wheels are available
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        include:
        - os: "macos-13"
          python-version: "3.9"
        exclude:
        - os: "macos-latest"
          python-version: "3.9"

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Qt dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            x11-utils \
            libegl1-mesa \
            libxcb-icccm4 \
            libxcb-image0 \
            libxcb-keysyms1 \
            libxcb-randr0 \
            libxcb-render-util0 \
            libxcb-xinerama0 \
            libopengl0 \
            libxcb-cursor0 \
            libxkbcommon-x11-dev \
            x11-utils \
            libvulkan-dev \
            libxcb-xinput-dev \
            libxkbcommon-dev \
            libxcb-xkb1 \
            xvfb
      - name: Setup virtual environment (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          python -m venv env
          source env/bin/activate
          which python
          python -c "import sys; print(sys.version)"
          python -m pip install pip -U
      - name: Setup virtual environment (Win)
        if: matrix.os == 'windows-latest'
        run: |
          python -m venv env
          env\Scripts\activate
          where python
          python -c "import sys; print(sys.version)"
          python -m pip install pip -U
      - name: Install PySide (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          env/bin/python -m pip install PySide6 --index-url=https://master.qt.io/snapshots/ci/pyside/dev/latest/
      - name: Install PySide (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          #python -m pip install PySide6 --index-url=https://master.qt.io/snapshots/ci/pyside/dev/latest/
          env\python.exe -m pip install PySide6 --index-url=https://master.qt.io/snapshots/ci/pyside/dev/latest/
      - name: Test PySide (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          env/bin/python -m pip install pytest
          env/bin/pytest test_wheel.py
      - name: Test PySide (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          env\python -m pip install pytest
          env\pytest test_wheel.py
      - name: Test Tools (Qt Graphical wrappers, Unix)
        if: matrix.os == 'ubuntu-latest'
        run: |
          DISPLAY=:1 xvfb-run -a --server-args="-screen 0, 1920x1200x24 -ac +extension GLX +render -noreset" env/bin/pyside6-designer --help-all
          DISPLAY=:1 xvfb-run -a --server-args="-screen 0, 1920x1200x24 -ac +extension GLX +render -noreset" env/bin/pyside6-assistant -help
          # FIXME:
          # env/bin/pyside6-linguist always open a window that we need to close
        shell: bash
        env:
          LIBGL_ALWAYS_SOFTWARE: 1
      - name: Test Tools (Qt Graphical wrappers, Windows)
        if: matrix.os == 'windows-latest'
        run: |
          env\Scripts\pyside6-designer.exe --help-all
          env\Scripts\pyside6-assistant.exe -help
      - name: Test Tools (Qt non-graphical wrappers, Unix)
        if: matrix.os != 'windows-latest'
        run: |
          env/bin/pyside6-lrelease -help
          env/bin/pyside6-lupdate -h
          env/bin/pyside6-rcc -h
          env/bin/pyside6-uic -h
          env/bin/pyside6-qmltyperegistrar -h
          #env/bin/pyside6-qmlimportscanner -h
          env/bin/pyside6-qmlcachegen -h
          env/bin/pyside6-qmlformat -h
          env/bin/pyside6-qmllint -h
          env/bin/pyside6-qmlls -h
      - name: Test Tools (Qt non-graphical wrappers, Unix)
        if: matrix.os == 'windows-latest'
        run: |
          env\Scripts\pyside6-lrelease.exe -help
          env\Scripts\pyside6-lupdate.exe -h
          env\Scripts\pyside6-rcc.exe -h
          env\Scripts\pyside6-uic.exe -h
          env\Scripts\pyside6-qmltyperegistrar.exe -h
          #env\Scripts\pyside6-qmlimportscanner.exe -h
          env\Scripts\pyside6-qmlcachegen.exe -h
          env\Scripts\pyside6-qmlformat.exe -h
          env\Scripts\pyside6-qmllint.exe -h
          env\Scripts\pyside6-qmlls.exe -h
      - name: Test Tools (PySide tools, Unix)
        if: matrix.os != 'windows-latest'
        run: |
          env/bin/pyside6-deploy -h
          env/bin/pyside6-genpyi -h
          env/bin/pyside6-metaobjectdump -h
          env/bin/pyside6-project -h
          env/bin/pyside6-qml -h
          env/bin/pyside6-qtpy2cpp -h
      - name: Test Tools (PySide tools, Windows)
        if: matrix.os == 'windows-latest'
        run: |
          env\Scripts\pyside6-deploy.exe -h
          env\Scripts\pyside6-genpyi.exe -h
          env\Scripts\pyside6-metaobjectdump.exe -h
          env\Scripts\pyside6-project.exe -h
          env\Scripts\pyside6-qml.exe -h
          env\Scripts\pyside6-qtpy2cpp.exe -h
      - name: Test Tools (Android, Unix-only)
        if: matrix.os != 'windows-latest'
        run: |
          env/bin/pyside6-android-deploy -h
