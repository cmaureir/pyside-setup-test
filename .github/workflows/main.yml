name: Python package

on: [push]

jobs:
  test-wheel:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest] #, macos-latest, windows-latest]
        # TODO: Add 'pypy3.10' and 'pypy3.9" when the wheels are available
        python-version: ["3.9"] #, "3.10", "3.11", "3.12"]
        #include:
        #- os: "macos-13"
        #  python-version: "3.9"
        #exclude:
        #- os: "macos-latest"
        #  python-version: "3.9"

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Qt dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get install -y \
            libxkbcommon-x11-0 \
            x11-utils \
            libgl1-mesa-dev \
            libvulkan-dev \
            libxcb-xinput-dev \
            libxcb-cursor-dev \
            libxcb-image0-dev \
            libxcb-xinerama0-dev \
            libxkbcommon-dev \
            libxkbcommon-x11-dev \
            libxcb-image0 \
            libxcb-keysyms1 \
            libxcb-render-util0 \
            libxcb-xkb1 \
            libxcb-randr0 \
            libxcb-icccm4 \
            xvfb
      - name: Setup virtual environment (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          python -m venv env
          source env/bin/activate
          which python
          python -c "import sys; print(sys.version)"
          python -m pip install pip -U
      - name: Setup virtual environment (Win)
        if: matrix.os == 'windows-latest'
        run: |
          python -m venv env
          env\Scripts\activate
          where python
          python -c "import sys; print(sys.version)"
          python -m pip install pip -U
      - name: Install PySide
        run: |
          #python -m pip install PySide6 --index-url=https://master.qt.io/snapshots/ci/pyside/dev/latest/
          env/bin/python -m pip install PySide6 --index-url=https://master.qt.io/snapshots/ci/pyside/dev/latest/
      - name: Test Qt Deps
        if: matrix.os == 'ubuntu-latest'
        run: |
          ldd env/lib/python${{ matrix.python-version }}/site-packages/PySide6/assistant
      - name: Test PySide
        run: |
          env/bin/python -m pip install pytest
          env/bin/pytest test_wheel.py
      - name: Test Tools (Qt wrappers)
        run: |
          env/bin/pyside6-assistant -h
          env/bin/pyside6-designer -h
          env/bin/pyside6-linguist -h
          env/bin/pyside6-lrelease -h
          env/bin/pyside6-lupdate -h
          env/bin/pyside6-rcc -h
          env/bin/pyside6-uic -h
          env/bin/pyside6-qmltyperegistrar -h
          env/bin/pyside6-qmlimportscanner -h
          env/bin/pyside6-qmlcachegen -h
          env/bin/pyside6-qmlformat -h
          env/bin/pyside6-qmllint -h
          env/bin/pyside6-qmlls -h
        shell: bash
        env:
          QT_DEBUG_PLUGINS: 1
      - name: Test Tools (PySide tools)
        run: |
          env/bin/pyside6-deploy -h
          env/bin/pyside6-genpyi -h
          env/bin/pyside6-metaobjectdump -h
          env/bin/pyside6-project -h
          env/bin/pyside6-qml -h
          env/bin/pyside6-qtpy2cpp -h
      - name: Test Tools (Android, Unix-only)
        if: matrix.os != 'windows-latest'
        run: |
          env/bin/pyside6-android-deploy -h
